##############################################################################
#   Modules Revision 3.0
#   Providing a flexible user environment
#
#   File:		modules.50-cmds/%M%
#   Revision:		%I%
#   First Edition:	2023/08/08
#   Last Mod.:		%U%, %G%
#
#   Authors:		Xavier Delaruelle, xavier.delaruelle@cea.fr
#
#   Description:	Testuite testsequence
#   Command:		load, ml
#   Modulefiles:    error, foo, all, setenv
#   Sub-Command:
#
#   Comment:	%C{
#           Test abort_on_error configuration option with
#           load sub-command
#		}C%
#
##############################################################################

skip_if_quick_mode

set mp $modpath.4
set mpre $modpathre.4
setenv_path_var MODULEPATH $mp

setenv_var MODULES_AUTO_HANDLING 1

set ans_continue [list]
lappend ans_continue [list out all-pre-out]
lappend ans_continue [list set TSPATH dir1]
lappend ans_continue [list set LOADEDMODULES all/1.0:foo/1.0]
lappend ans_continue [list set _LMFILES_ $mp/all/1.0:$mp/foo/1.0]
lappend ans_continue [list set __MODULES_LMREFRESH all/1.0]
lappend ans_continue [list set TS ok]
lappend ans_continue [list alias alall value]
lappend ans_continue [list funcall "() { value; }; export -f funcall;"]
lappend ans_continue [list out {complete value compall;}]
lappend ans_continue [list chdir /tmp]
lappend ans_continue [list out all-out]
lappend ans_continue [list ERR]

set ans_stop [list]
lappend ans_stop [list out all-pre-out]
lappend ans_stop [list set TSPATH dir1]
lappend ans_stop [list set __MODULES_LMREFRESH all/1.0]
lappend ans_stop [list set _LMFILES_ $mp/all/1.0]
lappend ans_stop [list set LOADEDMODULES all/1.0]
lappend ans_stop [list set TS ok]
lappend ans_stop [list alias alall value]
lappend ans_stop [list funcall "() { value; }; export -f funcall;"]
lappend ans_stop [list out {complete value compall;}]
lappend ans_stop [list chdir /tmp]
lappend ans_stop [list out all-out]
lappend ans_stop [list ERR]

set ans_all [list]
lappend ans_all [list out all-pre-out]
lappend ans_all [list set TSPATH dir1]
lappend ans_all [list set __MODULES_LMREFRESH all/1.0]
lappend ans_all [list set _LMFILES_ $mp/all/1.0:$mp/err/1.0:$mp/foo/1.0]
lappend ans_all [list set LOADEDMODULES all/1.0:err/1.0:foo/1.0]
lappend ans_all [list set TS ok]
lappend ans_all [list alias alall value]
lappend ans_all [list funcall "() { value; }; export -f funcall;"]
lappend ans_all [list out {complete value compall;}]
lappend ans_all [list chdir /tmp]
lappend ans_all [list out all-out]

set ans_conflict_force [list]
lappend ans_conflict_force [list out all-pre-out]
lappend ans_conflict_force [list set TSPATH dir1]
lappend ans_conflict_force [list set __MODULES_LMCONFLICT err/1.0&foo]
lappend ans_conflict_force [list set __MODULES_LMREFRESH all/1.0]
lappend ans_conflict_force [list set _LMFILES_ $mp/all/1.0:$mp/foo/1.0:$mp/err/1.0]
lappend ans_conflict_force [list set LOADEDMODULES all/1.0:foo/1.0:err/1.0]
lappend ans_conflict_force [list set TS ok]
lappend ans_conflict_force [list alias alall value]
lappend ans_conflict_force [list funcall "() { value; }; export -f funcall;"]
lappend ans_conflict_force [list out {complete value compall;}]
lappend ans_conflict_force [list chdir /tmp]
lappend ans_conflict_force [list out all-out]

set ans_conflict [list]
lappend ans_conflict [list out all-pre-out]
lappend ans_conflict [list set TSPATH dir1]
lappend ans_conflict [list set __MODULES_LMCONFLICT err/1.0&foo]
lappend ans_conflict [list set LOADEDMODULES all/1.0:err/1.0]
lappend ans_conflict [list set _LMFILES_ $mp/all/1.0:$mp/err/1.0]
lappend ans_conflict [list set __MODULES_LMREFRESH all/1.0]
lappend ans_conflict [list set TS ok]
lappend ans_conflict [list alias alall value]
lappend ans_conflict [list funcall "() { value; }; export -f funcall;"]
lappend ans_conflict [list out {complete value compall;}]
lappend ans_conflict [list chdir /tmp]
lappend ans_conflict [list out all-out]
lappend ans_conflict [list ERR]

set ans_reqmis_force [list]
lappend ans_reqmis_force [list out all-pre-out]
lappend ans_reqmis_force [list set TSPATH dir1]
lappend ans_reqmis_force [list set __MODULES_LMPREREQ err/1.0&unk]
lappend ans_reqmis_force [list set __MODULES_LMREFRESH all/1.0]
lappend ans_reqmis_force [list set _LMFILES_ $mp/all/1.0:$mp/err/1.0:$mp/foo/1.0]
lappend ans_reqmis_force [list set LOADEDMODULES all/1.0:err/1.0:foo/1.0]
lappend ans_reqmis_force [list set TS ok]
lappend ans_reqmis_force [list alias alall value]
lappend ans_reqmis_force [list funcall "() { value; }; export -f funcall;"]
lappend ans_reqmis_force [list out {complete value compall;}]
lappend ans_reqmis_force [list chdir /tmp]
lappend ans_reqmis_force [list out all-out]
lappend ans_reqmis_force [list ERR]

set ans_forbidden [list]
lappend ans_forbidden [list out all-pre-out]
lappend ans_forbidden [list set TSPATH dir1]
lappend ans_forbidden [list set __MODULES_LMREFRESH all/1.0]
lappend ans_forbidden [list set _LMFILES_ $mp/all/1.0:$mp/foo/1.0]
lappend ans_forbidden [list set LOADEDMODULES all/1.0:foo/1.0]
lappend ans_forbidden [list set TS ok]
lappend ans_forbidden [list alias alall value]
lappend ans_forbidden [list funcall "() { value; }; export -f funcall;"]
lappend ans_forbidden [list out {complete value compall;}]
lappend ans_forbidden [list chdir /tmp]
lappend ans_forbidden [list out all-out]
lappend ans_forbidden [list ERR]

set ans_not_found $ans_forbidden

set ans_hard_hidden $ans_forbidden

set ans_already_loaded [list]
lappend ans_already_loaded [list out all-pre-out]
lappend ans_already_loaded [list set TSPATH dir1]
lappend ans_already_loaded [list set __MODULES_LMREFRESH all/1.0]
lappend ans_already_loaded [list set _LMFILES_ $mp/err/1.0:$mp/all/1.0:$mp/foo/1.0]
lappend ans_already_loaded [list set LOADEDMODULES err/1.0:all/1.0:foo/1.0]
lappend ans_already_loaded [list set TS ok]
lappend ans_already_loaded [list alias alall value]
lappend ans_already_loaded [list funcall "() { value; }; export -f funcall;"]
lappend ans_already_loaded [list out {complete value compall;}]
lappend ans_already_loaded [list chdir /tmp]
lappend ans_already_loaded [list out all-out]

set ans_depre_error [list]
lappend ans_depre_error [list out all-pre-out]
lappend ans_depre_error [list set TS1 {}]
lappend ans_depre_error [list set TSPATH dir1]
lappend ans_depre_error [list set TS2 {}]
lappend ans_depre_error [list set LOADEDMODULES err/1.0:all/1.0:setenv/1.0]
lappend ans_depre_error [list set _LMFILES_ $mp/err/1.0:$mp/all/1.0:$mp/setenv/1.0]
lappend ans_depre_error [list set __MODULES_LMREFRESH all/1.0]
lappend ans_depre_error [list set TS ok]
lappend ans_depre_error [list alias alall value]
lappend ans_depre_error [list funcall "() { value; }; export -f funcall;"]
lappend ans_depre_error [list out {complete value compall;}]
lappend ans_depre_error [list chdir /tmp]
lappend ans_depre_error [list out all-out]
lappend ans_depre_error [list ERR]

set ans_depre_error_force [list]
lappend ans_depre_error_force [list out all-pre-out]
lappend ans_depre_error_force [list set TS1 {}]
lappend ans_depre_error_force [list set TSPATH dir1]
lappend ans_depre_error_force [list set TS2 {}]
lappend ans_depre_error_force [list set LOADEDMODULES all/1.0:foo/1.0:setenv/1.0]
lappend ans_depre_error_force [list set _LMFILES_ $mp/all/1.0:$mp/foo/1.0:$mp/setenv/1.0]
lappend ans_depre_error_force [list set __MODULES_LMREFRESH all/1.0]
lappend ans_depre_error_force [list unset __MODULES_LMPREREQ]
lappend ans_depre_error_force [list set TS ok]
lappend ans_depre_error_force [list alias alall value]
lappend ans_depre_error_force [list funcall "() { value; }; export -f funcall;"]
lappend ans_depre_error_force [list out {complete value compall;}]
lappend ans_depre_error_force [list chdir /tmp]
lappend ans_depre_error_force [list out all-out]
lappend ans_depre_error_force [list ERR]

set ans_depre_unload_error_force [list]
lappend ans_depre_unload_error_force [list out all-pre-out]
lappend ans_depre_unload_error_force [list set TS1 {}]
lappend ans_depre_unload_error_force [list set TSPATH dir1]
lappend ans_depre_unload_error_force [list set TS2 {}]
lappend ans_depre_unload_error_force [list set __MODULES_LMPREREQ err/1.0&err/1.0|foo]
lappend ans_depre_unload_error_force [list set __MODULES_LMREFRESH all/1.0]
lappend ans_depre_unload_error_force [list set _LMFILES_ $mp/all/1.0:$mp/foo/1.0:$mp/err/1.0:$mp/setenv/1.0]
lappend ans_depre_unload_error_force [list set LOADEDMODULES all/1.0:foo/1.0:err/1.0:setenv/1.0]
lappend ans_depre_unload_error_force [list set TS ok]
lappend ans_depre_unload_error_force [list alias alall value]
lappend ans_depre_unload_error_force [list funcall "() { value; }; export -f funcall;"]
lappend ans_depre_unload_error_force [list out {complete value compall;}]
lappend ans_depre_unload_error_force [list chdir /tmp]
lappend ans_depre_unload_error_force [list out all-out]

set ans_single_foo [list]
lappend ans_single_foo [list set _LMFILES_ $mp/foo/1.0]
lappend ans_single_foo [list set LOADEDMODULES foo/1.0]

set ans_load_last [list]
lappend ans_load_last [list set _LMFILES_ $mp/foo/1.0:$mp/lerr/1.0]
lappend ans_load_last [list set LOADEDMODULES foo/1.0:lerr/1.0]
lappend ans_load_last [list set __MODULES_LMPREREQ lerr/1.0&foo/1.0|err/1.0]

if {[cmpversion $tclsh_version 8.6] == -1} {
    set custom_error_trace "    invoked from within
\"if \{\[info exists env(TESTSUITE_ABORT_ON_ERROR)\]\} \{
    switch -- \$env(TESTSUITE_ABORT_ON_ERROR) \{
        bad - load_last_bad - load_first_bad - load-...\""
} else {
    set custom_error_trace {}
}


#
# continue behavior (multiple module to load)
#

setenv_var MODULES_ABORT_ON_ERROR ml:mod-to-sh:reload:switch_unload:try-load

setenv_var TESTSUITE_ABORT_ON_ERROR bad

set line_num [expr {[cmpversion $tclsh_version 8.6] == -1 ? 2 : 5}]
set ts_bad [msg_load err/1.0 [msg_moderr {invalid command name "bad"} bad $mp/err/1.0 $line_num {} {} {} $custom_error_trace]]
testouterr_cmd bash {load all/1.0 err/1.0 foo/1.0} $ans_continue $ts_bad

# --force has no effect
testouterr_cmd bash {load --force all/1.0 err/1.0 foo/1.0} $ans_continue $ts_bad


setenv_var TESTSUITE_ABORT_ON_ERROR break

set ts_break [msg_load err/1.0 $err_evalabort]
testouterr_cmd bash {load all/1.0 err/1.0 foo/1.0} $ans_continue $ts_break

# --force has no effect
testouterr_cmd bash {load --force all/1.0 err/1.0 foo/1.0} $ans_continue $ts_break


setenv_var TESTSUITE_ABORT_ON_ERROR exit

set ts_exit [msg_load err/1.0 $err_evalabort]
testouterr_cmd bash {load all/1.0 err/1.0 foo/1.0} $ans_stop $ts_exit

# --force has no effect
testouterr_cmd bash {load --force all/1.0 err/1.0 foo/1.0} $ans_stop $ts_exit


setenv_var TESTSUITE_ABORT_ON_ERROR continue

testouterr_cmd bash {load all/1.0 err/1.0 foo/1.0} $ans_all {}


setenv_var TESTSUITE_ABORT_ON_ERROR error

set line_num [expr {[cmpversion $tclsh_version 8.6] == -1 ? 2 : 17}]
set ts_error_verbose [msg_load all/1.0]\n\n
append ts_error_verbose [msg_load err/1.0 [msg_moderr msg {error msg} $mp/err/1.0 $line_num {} {} {} $custom_error_trace]]\n\n
append ts_error_verbose [msg_load foo/1.0]
testouterr_cmd bash {load -v all/1.0 err/1.0 foo/1.0} $ans_continue $ts_error_verbose

# ml command follows abort behavior
set ts_error_verbose_ml [msg_load all/1.0]\n\n
append ts_error_verbose_ml [msg_load err/1.0 [msg_moderr msg {error msg} $mp/err/1.0 $line_num {} {} {} $custom_error_trace]]
testouterr_cmd bash {ml -v all/1.0 err/1.0 foo/1.0} ERR $ts_error_verbose_ml


setenv_var TESTSUITE_ABORT_ON_ERROR conflict

# conflict declared after load attempt of conflicting module
set ts_conflict_declared_after [msg_load err/1.0 [err_conlo foo]]
testouterr_cmd bash {load all/1.0 foo/1.0 err/1.0} $ans_continue $ts_conflict_declared_after

# --force by-pass conflict error
set ts_conflict_force_declared_after [msg_load err/1.0 [err_conlof foo]]
testouterr_cmd bash {load --force all/1.0 foo/1.0 err/1.0} $ans_conflict_force $ts_conflict_force_declared_after

# conflict declared before load attempt of conflicting module
set ts_conflict_declared_before [msg_load foo/1.0 [err_conlo err/1.0]]
testouterr_cmd bash {load all/1.0 err/1.0 foo/1.0} $ans_conflict $ts_conflict_declared_before

# ml command follows abort behavior
testouterr_cmd bash {ml all/1.0 err/1.0 foo/1.0} ERR $ts_conflict_declared_before


setenv_var TESTSUITE_ABORT_ON_ERROR reqmis

set ts_reqmis [msg_load err/1.0 $err_path'unk' [err_reqlo unk]]
testouterr_cmd bash {load all/1.0 err/1.0 foo/1.0} $ans_continue $ts_reqmis

# --force by-pass missing requirement error
set ts_reqmis_force [msg_load err/1.0 $err_path'unk' [err_reqlof unk]]
testouterr_cmd bash {load --force all/1.0 err/1.0 foo/1.0} $ans_reqmis_force $ts_reqmis_force


setenv_var TESTSUITE_ABORT_ON_ERROR depre_load_error

setenv_loaded_module [list err/1.0] [list $mp/err/1.0]
setenv_var __MODULES_LMPREREQ err/1.0&err/1.0|foo
set line_num [expr {[cmpversion $tclsh_version 8.6] == -1 ? 2 : 28}]
set ts_depre_load_error [msg_load err/1.0 [msg_moderr msg {error msg} $mp/err/1.0 $line_num {} {} {} $custom_error_trace]]\n\n
append ts_depre_load_error [msg_load foo/1.0 [err_depre err/1.0]]
testouterr_cmd bash {load all/1.0 foo/1.0 setenv/1.0} $ans_depre_error $ts_depre_load_error

# --force by-pass dependent reload error
set ts_depre_load_error_force [msg_load err/1.0 [msg_moderr msg {error msg} $mp/err/1.0 $line_num {} {} {} $custom_error_trace]]\n\n
append ts_depre_load_error_force [msg_load foo/1.0 [err_depref err/1.0] {Unloading dependent: err/1.0}]
testouterr_cmd bash {load --force all/1.0 foo/1.0 setenv/1.0} $ans_depre_error_force $ts_depre_load_error_force


setenv_var TESTSUITE_ABORT_ON_ERROR depre_unload_error

set line_num [expr {[cmpversion $tclsh_version 8.6] == -1 ? 2 : 34}]
set ts_depre_unload_error [msg_unload err/1.0 [msg_moderr msg {error msg} $mp/err/1.0 $line_num {} {} {} $custom_error_trace]]\n\n
append ts_depre_unload_error [msg_load foo/1.0 [err_depun err/1.0]]
testouterr_cmd bash {load all/1.0 foo/1.0 setenv/1.0} $ans_depre_error $ts_depre_unload_error

# --force by-pass dependent reload error
set ts_depre_unload_error_force [msg_unload err/1.0 [msg_modwarn msg {error msg} $mp/err/1.0 $line_num {} {} {} $custom_error_trace]]\n\n
append ts_depre_unload_error_force [msg_top_load foo/1.0 {} {} err/1.0]
testouterr_cmd bash {load --force all/1.0 foo/1.0 setenv/1.0} $ans_depre_unload_error_force $ts_depre_unload_error_force

unsetenv_loaded_module
unsetenv_var __MODULES_LMPREREQ


setenv_var TESTSUITE_ABORT_ON_ERROR forbidden

set ts_forbidden [err_accessdenied err/1.0]
testouterr_cmd bash {load all/1.0 err/1.0 foo/1.0} $ans_forbidden $ts_forbidden


setenv_var TESTSUITE_ABORT_ON_ERROR not_found

set ts_not_found $err_path'unk/1.0'
testouterr_cmd bash {load all/1.0 unk/1.0 foo/1.0} $ans_not_found $ts_not_found


setenv_var TESTSUITE_ABORT_ON_ERROR hard_hidden

set ts_hard_hidden $err_path'err/1.0'
testouterr_cmd bash {load all/1.0 err/1.0 foo/1.0} $ans_hard_hidden $ts_hard_hidden


setenv_var TESTSUITE_ABORT_ON_ERROR already_loaded

setenv_loaded_module [list err/1.0] [list $mp/err/1.0]
testouterr_cmd bash {load all/1.0 err/1.0 foo/1.0} $ans_already_loaded {}
unsetenv_loaded_module


#
# continue behavior (single module to load, no effect)
#

setenv_var TESTSUITE_ABORT_ON_ERROR bad

testouterr_cmd bash {load err/1.0} ERR $ts_bad

# --force has no effect
testouterr_cmd bash {load --force err/1.0} ERR $ts_bad

testouterr_cmd bash {load foo/1.0} $ans_single_foo {}


#
# continue behavior ("module load" command in modulefile, no effect)
#

setenv_var TESTSUITE_ABORT_ON_ERROR load_last_bad

set ts_load_bad $ts_bad\n\n
append ts_load_bad [msg_load lerr/1.0 [err_reqlo err/1.0]]
testouterr_cmd bash {load lerr/1.0} ERR $ts_load_bad


setenv_var TESTSUITE_ABORT_ON_ERROR load_first_bad

testouterr_cmd bash {load lerr/1.0} ERR $ts_load_bad


setenv_var TESTSUITE_ABORT_ON_ERROR load_first_break

set ts_load_break $ts_break\n\n
append ts_load_break [msg_load lerr/1.0 [err_reqlo err/1.0]]
testouterr_cmd bash {load lerr/1.0} ERR $ts_load_break


setenv_var TESTSUITE_ABORT_ON_ERROR load_first_exit

set ts_load_exit $ts_exit\n\n
append ts_load_exit [msg_load lerr/1.0 [err_reqlo err/1.0]]
testouterr_cmd bash {load lerr/1.0} ERR $ts_load_exit


setenv_var TESTSUITE_ABORT_ON_ERROR load_last_forbidden

set ts_load_forbidden [msg_load lerr/1.0 $ts_forbidden [err_reqlo err/1.0]]
testouterr_cmd bash {load lerr/1.0} ERR $ts_load_forbidden


setenv_var TESTSUITE_ABORT_ON_ERROR load_first_forbidden

testouterr_cmd bash {load lerr/1.0} ERR $ts_load_forbidden


setenv_var TESTSUITE_ABORT_ON_ERROR load_last_not_found

set ts_load_not_found [msg_load lerr/1.0 $ts_not_found [err_reqlo unk/1.0]]
testouterr_cmd bash {load lerr/1.0} ERR $ts_load_not_found


setenv_var TESTSUITE_ABORT_ON_ERROR load_first_not_found

testouterr_cmd bash {load lerr/1.0} ERR $ts_load_not_found


setenv_var TESTSUITE_ABORT_ON_ERROR load_last_hard_hidden

set ts_load_hard_hidden [msg_load lerr/1.0 $ts_hard_hidden [err_reqlo err/1.0]]
testouterr_cmd bash {load lerr/1.0} ERR $ts_load_hard_hidden


setenv_var TESTSUITE_ABORT_ON_ERROR load_first_hard_hidden

testouterr_cmd bash {load lerr/1.0} ERR $ts_load_hard_hidden


#
# abort behavior (multiple module to load)
#

setenv_var MODULES_ABORT_ON_ERROR load:ml:reload:switch_unload

setenv_var TESTSUITE_ABORT_ON_ERROR bad

testouterr_cmd bash {load all/1.0 err/1.0 foo/1.0} ERR $ts_bad
testouterr_cmd bash {ml all/1.0 err/1.0 foo/1.0} ERR $ts_bad


setenv_var TESTSUITE_ABORT_ON_ERROR break

testouterr_cmd bash {load all/1.0 err/1.0 foo/1.0} ERR $ts_break


setenv_var TESTSUITE_ABORT_ON_ERROR exit

testouterr_cmd bash {load all/1.0 err/1.0 foo/1.0} ERR $ts_exit


setenv_var TESTSUITE_ABORT_ON_ERROR continue

testouterr_cmd bash {load all/1.0 err/1.0 foo/1.0} $ans_all {}


setenv_var TESTSUITE_ABORT_ON_ERROR error

set line_num [expr {[cmpversion $tclsh_version 8.6] == -1 ? 2 : 17}]
set ts_error_verbose_abort [msg_load all/1.0]\n\n
append ts_error_verbose_abort [msg_load err/1.0 [msg_moderr msg {error msg} $mp/err/1.0 $line_num {} {} {} $custom_error_trace]]
testouterr_cmd bash {load -v all/1.0 err/1.0 foo/1.0} ERR $ts_error_verbose_abort

# --force leads to continue behavior
set ts_error_verbose_abort_force [msg_load all/1.0]\n\n
append ts_error_verbose_abort_force [msg_load err/1.0 [msg_moderr msg {error msg} $mp/err/1.0 $line_num {} {} {} $custom_error_trace]]\n\n
append ts_error_verbose_abort_force [msg_load foo/1.0]
testouterr_cmd bash {load --force -v all/1.0 err/1.0 foo/1.0} $ans_continue $ts_error_verbose_abort_force


setenv_var TESTSUITE_ABORT_ON_ERROR conflict

# conflict declared after load attempt of conflicting module
testouterr_cmd bash {load all/1.0 foo/1.0 err/1.0} ERR $ts_conflict_declared_after

# --force by-pass conflict error
testouterr_cmd bash {load --force all/1.0 foo/1.0 err/1.0} $ans_conflict_force $ts_conflict_force_declared_after

# conflict declared before load attempt of conflicting module
testouterr_cmd bash {load all/1.0 err/1.0 foo/1.0} ERR $ts_conflict_declared_before


setenv_var TESTSUITE_ABORT_ON_ERROR reqmis

testouterr_cmd bash {load all/1.0 err/1.0 foo/1.0} ERR $ts_reqmis
testouterr_cmd bash {ml all/1.0 err/1.0 foo/1.0} ERR $ts_reqmis

# --force by-pass missing requirement error
testouterr_cmd bash {load --force all/1.0 err/1.0 foo/1.0} $ans_reqmis_force $ts_reqmis_force


setenv_loaded_module [list err/1.0] [list $mp/err/1.0]
setenv_var __MODULES_LMPREREQ err/1.0&err/1.0|foo

setenv_var TESTSUITE_ABORT_ON_ERROR depre_load_error

testouterr_cmd bash {load all/1.0 foo/1.0 setenv/1.0} ERR $ts_depre_load_error

# --force by-pass dependent reload error
testouterr_cmd bash {load --force all/1.0 foo/1.0 setenv/1.0} $ans_depre_error_force $ts_depre_load_error_force


setenv_var TESTSUITE_ABORT_ON_ERROR depre_unload_error

testouterr_cmd bash {load all/1.0 foo/1.0 setenv/1.0} ERR $ts_depre_unload_error

# --force by-pass dependent reload error
testouterr_cmd bash {load --force all/1.0 foo/1.0 setenv/1.0} $ans_depre_unload_error_force $ts_depre_unload_error_force


setenv_var TESTSUITE_ABORT_ON_ERROR depre_load_bad

set line_num [expr {[cmpversion $tclsh_version 8.6] == -1 ? 2 : 40}]
set ts_depre_load_bad [msg_load err/1.0 [msg_moderr {invalid command name "bad"} bad $mp/err/1.0 $line_num {} {} {} $custom_error_trace]]\n\n
append ts_depre_load_bad [msg_load foo/1.0 [err_depre err/1.0]]
testouterr_cmd bash {load all/1.0 foo/1.0 setenv/1.0} ERR $ts_depre_load_bad

setenv_var TESTSUITE_ABORT_ON_ERROR depre_unload_bad

set line_num [expr {[cmpversion $tclsh_version 8.6] == -1 ? 2 : 46}]
set ts_depre_unload_bad [msg_unload err/1.0 [msg_moderr {invalid command name "bad"} bad $mp/err/1.0 $line_num {} {} {} $custom_error_trace]]\n\n
append ts_depre_unload_bad [msg_load foo/1.0 [err_depun err/1.0]]
testouterr_cmd bash {load all/1.0 foo/1.0 setenv/1.0} ERR $ts_depre_unload_bad


setenv_var TESTSUITE_ABORT_ON_ERROR depre_load_break

set ts_depre_load_break [msg_load err/1.0 $err_evalabort]\n\n
append ts_depre_load_break [msg_load foo/1.0 [err_depre err/1.0]]
testouterr_cmd bash {load all/1.0 foo/1.0 setenv/1.0} ERR $ts_depre_load_break

setenv_var TESTSUITE_ABORT_ON_ERROR depre_unload_break

set ts_depre_unload_break [msg_unload err/1.0 $err_evalabort]\n\n
append ts_depre_unload_break [msg_load foo/1.0 [err_depun err/1.0]]
testouterr_cmd bash {load all/1.0 foo/1.0 setenv/1.0} ERR $ts_depre_unload_break


setenv_var TESTSUITE_ABORT_ON_ERROR depre_load_exit

set ts_depre_load_exit [msg_load err/1.0 $err_evalabort]\n\n
append ts_depre_load_exit [msg_load foo/1.0 [err_depre err/1.0]]
testouterr_cmd bash {load all/1.0 foo/1.0 setenv/1.0} ERR $ts_depre_load_exit

setenv_var TESTSUITE_ABORT_ON_ERROR depre_unload_exit

set ts_depre_unload_exit [msg_unload err/1.0 $err_evalabort]\n\n
append ts_depre_unload_exit [msg_load foo/1.0 [err_depun err/1.0]]
testouterr_cmd bash {load all/1.0 foo/1.0 setenv/1.0} ERR $ts_depre_unload_exit


setenv_var TESTSUITE_ABORT_ON_ERROR depre_load_reqmis

set ts_depre_load_reqmis [msg_load err/1.0 [err_prereq unk]]\n\n
append ts_depre_load_reqmis [msg_load foo/1.0 [err_depre err/1.0]]
testouterr_cmd bash {load all/1.0 foo/1.0 setenv/1.0} ERR $ts_depre_load_reqmis


setenv_var TESTSUITE_ABORT_ON_ERROR depre_load_conflict

set ts_depre_load_conflict [msg_load err/1.0 [err_conlo all]]\n\n
append ts_depre_load_conflict [msg_load foo/1.0 [err_depre err/1.0]]
testouterr_cmd bash {load all/1.0 foo/1.0 setenv/1.0} ERR $ts_depre_load_conflict


setenv_var TESTSUITE_ABORT_ON_ERROR depre_load_forbidden

set ts_depre_load_forbidden [msg_load foo/1.0 [err_accessdenied err/1.0] [err_depre err/1.0]]
testouterr_cmd bash {load all/1.0 foo/1.0 setenv/1.0} ERR $ts_depre_load_forbidden


setenv_var TESTSUITE_ABORT_ON_ERROR depre_load_hard_hidden

set ts_depre_load_hard_hidden [msg_load foo/1.0 $ts_hard_hidden [err_depre err/1.0]]
testouterr_cmd bash {load all/1.0 foo/1.0 setenv/1.0} ERR $ts_depre_load_hard_hidden

unsetenv_loaded_module
unsetenv_var __MODULES_LMPREREQ


setenv_var TESTSUITE_ABORT_ON_ERROR forbidden

testouterr_cmd bash {load all/1.0 err/1.0 foo/1.0} ERR $ts_forbidden


setenv_var TESTSUITE_ABORT_ON_ERROR not_found

testouterr_cmd bash {load all/1.0 unk/1.0 foo/1.0} ERR $ts_not_found


setenv_var TESTSUITE_ABORT_ON_ERROR hard_hidden

testouterr_cmd bash {load all/1.0 err/1.0 foo/1.0} ERR $ts_hard_hidden


setenv_var TESTSUITE_ABORT_ON_ERROR already_loaded

setenv_loaded_module [list err/1.0] [list $mp/err/1.0]
testouterr_cmd bash {load all/1.0 err/1.0 foo/1.0} $ans_already_loaded {}
unsetenv_loaded_module


#
# abort behavior (single module to load, no effect)
#

setenv_var TESTSUITE_ABORT_ON_ERROR bad

testouterr_cmd bash {load err/1.0} ERR $ts_bad

# --force has no effect
testouterr_cmd bash {load --force err/1.0} ERR $ts_bad

testouterr_cmd bash {load foo/1.0} $ans_single_foo {}


#
# abort behavior ("module load" command in modulefile, no effect)
#

setenv_var TESTSUITE_ABORT_ON_ERROR load_last_bad

testouterr_cmd bash {load lerr/1.0} ERR $ts_load_bad


setenv_var TESTSUITE_ABORT_ON_ERROR load_first_bad

testouterr_cmd bash {load lerr/1.0} ERR $ts_load_bad


setenv_var TESTSUITE_ABORT_ON_ERROR load_first_break

testouterr_cmd bash {load lerr/1.0} ERR $ts_load_break


setenv_var TESTSUITE_ABORT_ON_ERROR load_first_exit

testouterr_cmd bash {load lerr/1.0} ERR $ts_load_exit


setenv_var TESTSUITE_ABORT_ON_ERROR load_last_forbidden

testouterr_cmd bash {load lerr/1.0} ERR $ts_load_forbidden


setenv_var TESTSUITE_ABORT_ON_ERROR load_first_forbidden

testouterr_cmd bash {load lerr/1.0} ERR $ts_load_forbidden


setenv_var TESTSUITE_ABORT_ON_ERROR load_last_not_found

testouterr_cmd bash {load lerr/1.0} ERR $ts_load_not_found


setenv_var TESTSUITE_ABORT_ON_ERROR load_first_not_found

testouterr_cmd bash {load lerr/1.0} ERR $ts_load_not_found


setenv_var TESTSUITE_ABORT_ON_ERROR load_last_hard_hidden

testouterr_cmd bash {load lerr/1.0} ERR $ts_load_hard_hidden


setenv_var TESTSUITE_ABORT_ON_ERROR load_first_hard_hidden

testouterr_cmd bash {load lerr/1.0} ERR $ts_load_hard_hidden


#
#  Cleanup
#

reset_test_env
