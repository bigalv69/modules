##############################################################################
#   Modules Revision 3.0
#   Providing a flexible user environment
#
#   File:		modules.50-cmds/%M%
#   Revision:		%I%
#   First Edition:	2021/10/19
#   Last Mod.:		%U%, %G%
#
#   Authors:		Xavier Delaruelle, xavier.delaruelle@cea.fr
#
#   Description:	Testuite testsequence
#   Command:        state
#   Modulefiles:
#   Sub-Command:
#
#   Comment:	%C{
#           Test of the 'state' command
#		}C%
#
##############################################################################

set state_header "- State name $modlin.- Value $modlin"
set envvar_header "- Env. variable $modlin.- Value $modlin"

set statelist [list always_read_full_file autoinit clock_seconds cmdline commandname domainname error_count extra_siteconfig_loaded false_rendered force hiding_threshold inhibit_errreport inhibit_interp init_error_report is_stderr_tty is_win kernelversion lm_info_cached machine modulefile nodename os osversion paginate path_separator report_format reportfd return_false shell shelltype siteconfig_loaded sub1_separator sub2_separator subcmd subcmd_args supported_shells tcl_ext_lib_loaded tcl_version term_columns usergroups username]

#
# global state test
#

set tserr "$vers_reportre\n\n$state_header"
if {[auto_execok uname] eq {} || [auto_execok domainname] eq {}} {
    append tserr "(\nWARNING: Command '\\S+' cannot be found)+"
}
if {$group_name_fetch_failed} {
    if {$install_libtclenvmodules eq {y}} {
        append tserr "(\nWARNING: couldn't find name for group id \"\\S+\": Success)+"
    } else {
        append tserr "(\nWARNING: .*\n  .*/id: cannot find name for group ID \\S+)+"
    }
}
foreach param $statelist {
    append tserr "\n$param\\s+.*"
}
append tserr "\n\n$envvar_header"
set envvar_list [list]
foreach var [list LOADEDMODULES _LMFILES_ MODULE* __MODULES_* __MODULES_SHARE_* *_module*] {
    set envvar_list [concat $envvar_list [array names env -glob $var]]
}
foreach envvar [lsort -unique $envvar_list] {
    append tserr "\n[regsub -all {([\\${}*?()+\[\]])} $envvar {\\\1}]\\s+[regsub -all {([\\${}*?()+\[\]])} $env($envvar) {\\\1}]"
}
testouterr_cmd_re sh {state} OK $tserr

# also test via ml command
testouterr_cmd_re sh {ml state} OK $tserr

# see 00/071 for bad argument number test


#
# specific state value retrieval
#

# dynamically defined state
set tserr "$vers_reportre

$state_header
supported_shells\\s+sh bash ksh zsh csh tcsh fish cmd tcl perl python ruby lisp cmake r"
testouterr_cmd_re sh {state supported_shells} OK $tserr

# pre-registered state
set tserr "$vers_reportre

$state_header
autoinit\\s+0"
testouterr_cmd_re sh {state autoinit} OK $tserr

# also test via ml command
testouterr_cmd_re sh {ml state autoinit} OK $tserr

# unknown state specified
set tserr "$error_msgs: State 'unknown' does not exist"
testouterr_cmd_re sh {state unknown} ERR $tserr

# empty string state specified
set tserr "$error_msgs: State '' does not exist"
testouterr_cmd_re sh {state } ERR $tserr


#
#  Cleanup
#

reset_test_env
