##############################################################################
#   Modules Revision 3.0
#   Providing a flexible user environment
#
#   File:		modules.50-cmds/%M%
#   Revision:		%I%
#   First Edition:	2021/03/11
#   Last Mod.:		%U%, %G%
#
#   Authors:		Xavier Delaruelle, xavier.delaruelle@cea.fr
#
#   Description:	Testuite testsequence
#   Command:		list, avail, path, paths, is-avail
#   Modulefiles:    variant
#   Sub-Command:
#
#   Comment:	%C{
#           Tests around modulefiles using the variant mechanism
#		}C%
#
##############################################################################

set mp $modpath.3
set mpre $modpathre.3
setenv_path_var MODULEPATH $mp


setenv_var MODULES_LIST_OUTPUT header:idx:variant:sym:tag:key
setenv_var MODULES_LIST_TERSE_OUTPUT header

#
# list tests
#

setenv_var __MODULES_LMVARIANT variant/1.0&foo|val1|0|0
setenv_loaded_module [list variant/1.0] [list $mp/variant/1.0]

testouterr_cmd sh {list} OK "$cur_loaded
 1) variant/1.0{foo=val1}  

Key:
{variant=value}  "

skip_if_quick_mode

testouterr_cmd sh {list -o header:idx:sym:tag:key} OK "$cur_loaded
 1) variant/1.0  "

testouterr_cmd sh {list -t} OK "$cur_loaded
variant/1.0"

testouterr_cmd sh {list -j} OK "{\"variant/1.0\": { \"name\": \"variant/1.0\", \"type\": \"modulefile\", \"variants\": { \"foo\": \"val1\" }, \"symbols\": \[\], \"tags\": \[\], \"pathname\": \"$mp/variant/1.0\"}}"

# multiple variants set on module
setenv_var __MODULES_LMVARIANT variant/1.0&foo|val1|0|0&bar|val2|0|0
setenv_loaded_module [list variant/1.0] [list $mp/variant/1.0]

set tserr "$cur_loaded
 1) variant/1.0{bar=val2:foo=val1}  

Key:
{variant=value}  "
testouterr_cmd sh {list} OK $tserr
testouterr_cmd sh {ml} OK $tserr

set tserr "{\"variant/1.0\": { \"name\": \"variant/1.0\", \"type\": \"modulefile\", \"variants\": { \"bar\": \"val2\", \"foo\": \"val1\" }, \"symbols\": \[\], \"tags\": \[\], \"pathname\": \"$mp/variant/1.0\"}}"
testouterr_cmd sh {list -j} OK $tserr
testouterr_cmd sh {ml -j} OK $tserr

# multiple modules loaded
setenv_var __MODULES_LMVARIANT variant/1.0&foo|val1|0|0&bar|val2|0|0:variant/2.0&baz|val3|0|0
setenv_loaded_module [list variant/1.0 variant/2.0] [list $mp/variant/1.0 $mp/variant/2.0]

testouterr_cmd sh {list} OK "$cur_loaded
 1) variant/1.0{bar=val2:foo=val1}   2) variant/2.0{baz=val3}  

Key:
{variant=value}  "

testouterr_cmd sh {list -j} OK "{\"variant/1.0\": { \"name\": \"variant/1.0\", \"type\": \"modulefile\", \"variants\": { \"bar\": \"val2\", \"foo\": \"val1\" }, \"symbols\": \[\], \"tags\": \[\], \"pathname\": \"$mp/variant/1.0\"},
\"variant/2.0\": { \"name\": \"variant/2.0\", \"type\": \"modulefile\", \"variants\": { \"baz\": \"val3\" }, \"symbols\": \[\], \"tags\": \[\], \"pathname\": \"$mp/variant/2.0\"}}"

# loaded modules with also symbols defined
setenv_var __MODULES_LMALTNAME variant/1.0&variant/foo
testouterr_cmd sh {list} OK "$cur_loaded
 1) variant/1.0{bar=val2:foo=val1}(foo)   2) variant/2.0{baz=val3}  

Key:
{variant=value}  (symbolic-version)  "

testouterr_cmd sh {list -j} OK "{\"variant/1.0\": { \"name\": \"variant/1.0\", \"type\": \"modulefile\", \"variants\": { \"bar\": \"val2\", \"foo\": \"val1\" }, \"symbols\": \[ \"foo\" \], \"tags\": \[\], \"pathname\": \"$mp/variant/1.0\"},
\"variant/2.0\": { \"name\": \"variant/2.0\", \"type\": \"modulefile\", \"variants\": { \"baz\": \"val3\" }, \"symbols\": \[\], \"tags\": \[\], \"pathname\": \"$mp/variant/2.0\"}}"
unsetenv_var __MODULES_LMALTNAME

# duplicate variant definition
setenv_var __MODULES_LMVARIANT variant/1.0&foo|val1&foo|val3|0|0&bar|val2|0|0:variant/2.0&baz|val3|0|0
testouterr_cmd sh {list} OK "$cur_loaded
 1) variant/1.0{bar=val2:foo=val3}   2) variant/2.0{baz=val3}  

Key:
{variant=value}  "

testouterr_cmd sh {list -j} OK "{\"variant/1.0\": { \"name\": \"variant/1.0\", \"type\": \"modulefile\", \"variants\": { \"bar\": \"val2\", \"foo\": \"val3\" }, \"symbols\": \[\], \"tags\": \[\], \"pathname\": \"$mp/variant/1.0\"},
\"variant/2.0\": { \"name\": \"variant/2.0\", \"type\": \"modulefile\", \"variants\": { \"baz\": \"val3\" }, \"symbols\": \[\], \"tags\": \[\], \"pathname\": \"$mp/variant/2.0\"}}"

# badly defined loaded variant
setenv_var __MODULES_LMVARIANT variant/1.0
testouterr_cmd sh {list} OK "$cur_loaded
 1) variant/1.0   2) variant/2.0  "
setenv_var __MODULES_LMVARIANT variant/1.0&foo
testouterr_cmd sh {list} OK "$cur_loaded
 1) variant/1.0{foo=}   2) variant/2.0  

Key:
{variant=value}  "
setenv_var __MODULES_LMVARIANT variant/1.0&foo|val
testouterr_cmd sh {list} OK "$cur_loaded
 1) variant/1.0{foo=val}   2) variant/2.0  

Key:
{variant=value}  "
setenv_var __MODULES_LMVARIANT variant/1.0&foo|val|str
testouterr_cmd sh {list} OK "$cur_loaded
 1) variant/1.0{foo=val}   2) variant/2.0  

Key:
{variant=value}  "

# colored output
setenv_var MODULES_COLORS "se=2:va=33"
setenv_var __MODULES_LMVARIANT variant/1.0&foo|val1|0|0&bar|val2|0|0:variant/2.0&baz|val3|0|0

testouterr_cmd_re sh {list --color=always} OK "$cur_loaded
 1\\) variant/1.0[sgr 2]{[sgr 22][sgr 33]bar=[sgr 0][sgr 33]val2[sgr 0][sgr 2]:[sgr 22][sgr 33]foo=[sgr 0][sgr 33]val1[sgr 0][sgr 2]}[sgr 22]   2\\) variant/2.0[sgr 2]{[sgr 22][sgr 33]baz=[sgr 0][sgr 33]val3[sgr 0][sgr 2]}[sgr 22]  

Key:
[sgr 2]{[sgr 22][sgr 33]variant=value[sgr 0][sgr 2]}[sgr 22]  "

# boolean variant set
setenv_loaded_module [list variant/1.0] [list $mp/variant/1.0]
setenv_var __MODULES_LMVARIANT variant/1.0&foo|1|1|0
testouterr_cmd sh {list} OK "$cur_loaded
 1) variant/1.0{+foo}  

Key:
{+variant}={variant=on}  {variant=value}  "
testouterr_cmd sh {list -j} OK "{\"variant/1.0\": { \"name\": \"variant/1.0\", \"type\": \"modulefile\", \"variants\": { \"foo\": true }, \"symbols\": \[\], \"tags\": \[\], \"pathname\": \"$mp/variant/1.0\"}}"
setenv_var __MODULES_LMVARIANT variant/1.0&foo|0|1|0
testouterr_cmd sh {list} OK "$cur_loaded
 1) variant/1.0{-foo}  

Key:
{-variant}={variant=off}  {variant=value}  "
testouterr_cmd sh {list -j} OK "{\"variant/1.0\": { \"name\": \"variant/1.0\", \"type\": \"modulefile\", \"variants\": { \"foo\": false }, \"symbols\": \[\], \"tags\": \[\], \"pathname\": \"$mp/variant/1.0\"}}"
# bad persistency information for boolean variant
setenv_var __MODULES_LMVARIANT variant/1.0&foo|1|1
testouterr_cmd sh {list} OK "$cur_loaded
 1) variant/1.0{+foo}  

Key:
{+variant}={variant=on}  {variant=value}  "
testouterr_cmd sh {list -j} OK "{\"variant/1.0\": { \"name\": \"variant/1.0\", \"type\": \"modulefile\", \"variants\": { \"foo\": true }, \"symbols\": \[\], \"tags\": \[\], \"pathname\": \"$mp/variant/1.0\"}}"
setenv_var __MODULES_LMVARIANT variant/1.0&foo||1|0
testouterr_cmd sh {list} OK "$cur_loaded
 1) variant/1.0{-foo}  

Key:
{-variant}={variant=off}  {variant=value}  "
testouterr_cmd sh {list -j} OK "{\"variant/1.0\": { \"name\": \"variant/1.0\", \"type\": \"modulefile\", \"variants\": { \"foo\": false }, \"symbols\": \[\], \"tags\": \[\], \"pathname\": \"$mp/variant/1.0\"}}"
setenv_var __MODULES_LMVARIANT variant/1.0&foo|str|1|0
testouterr_cmd sh {list} OK "$cur_loaded
 1) variant/1.0{-foo}  

Key:
{-variant}={variant=off}  {variant=value}  "
testouterr_cmd sh {list -j} OK "{\"variant/1.0\": { \"name\": \"variant/1.0\", \"type\": \"modulefile\", \"variants\": { \"foo\": false }, \"symbols\": \[\], \"tags\": \[\], \"pathname\": \"$mp/variant/1.0\"}}"
setenv_var __MODULES_LMVARIANT variant/1.0&foo|1||0
testouterr_cmd sh {list -j} OK "{\"variant/1.0\": { \"name\": \"variant/1.0\", \"type\": \"modulefile\", \"variants\": { \"foo\": \"1\" }, \"symbols\": \[\], \"tags\": \[\], \"pathname\": \"$mp/variant/1.0\"}}"
setenv_var __MODULES_LMVARIANT variant/1.0&foo|0|str|0
testouterr_cmd sh {list -j} OK "{\"variant/1.0\": { \"name\": \"variant/1.0\", \"type\": \"modulefile\", \"variants\": { \"foo\": \"0\" }, \"symbols\": \[\], \"tags\": \[\], \"pathname\": \"$mp/variant/1.0\"}}"

# color output with boolean variant
setenv_var MODULES_COLORS "se=2:va=33"
setenv_var __MODULES_LMVARIANT variant/1.0&foo|1|1|0
testouterr_cmd_re sh {list --color=always} OK "$cur_loaded
 1\\) variant/1.0[sgr 2]{[sgr 22][sgr 33]\\+foo[sgr 0][sgr 2]}[sgr 22]  

Key:
[sgr 2]{[sgr 22][sgr 33]\\+variant[sgr 0][sgr 2]}[sgr 22]=[sgr 2]{[sgr 22][sgr 33]variant=on[sgr 0][sgr 2]}[sgr 22]  [sgr 2]{[sgr 22][sgr 33]variant=value[sgr 0][sgr 2]}[sgr 22]  "
setenv_var __MODULES_LMVARIANT variant/1.0&foo|0|1|0
testouterr_cmd_re sh {list --color=always} OK "$cur_loaded
 1\\) variant/1.0[sgr 2]{[sgr 22][sgr 33]-foo[sgr 0][sgr 2]}[sgr 22]  

Key:
[sgr 2]{[sgr 22][sgr 33]-variant[sgr 0][sgr 2]}[sgr 22]=[sgr 2]{[sgr 22][sgr 33]variant=off[sgr 0][sgr 2]}[sgr 22]  [sgr 2]{[sgr 22][sgr 33]variant=value[sgr 0][sgr 2]}[sgr 22]  "
setenv_var __MODULES_LMVARIANT variant/1.0&foo|0|1|0&bar|val|0
testouterr_cmd_re sh {list --color=always} OK "$cur_loaded
 1\\) variant/1.0[sgr 2]{[sgr 22][sgr 33]bar=[sgr 0][sgr 33]val[sgr 0][sgr 2]:[sgr 22][sgr 33]-foo[sgr 0][sgr 2]}[sgr 22]  

Key:
[sgr 2]{[sgr 22][sgr 33]-variant[sgr 0][sgr 2]}[sgr 22]=[sgr 2]{[sgr 22][sgr 33]variant=off[sgr 0][sgr 2]}[sgr 22]  [sgr 2]{[sgr 22][sgr 33]variant=value[sgr 0][sgr 2]}[sgr 22]  "

# color output with default variant
setenv_var MODULES_COLORS "se=2:va=33:de=4:aL=100:L=90"
setenv_var __MODULES_LMVARIANT variant/1.0&foo|val1|0|1

# valued variant value is default, module is loaded, key is reported
set tserr "$cur_loaded
 1\\) variant/1.0[sgr 2]{[sgr 22][sgr 33]foo=[sgr 0][sgr 33][sgr 4]val1[sgr 0][sgr 0][sgr 2]}[sgr 22]  

Key:
[sgr 4]default-version[sgr 0]  [sgr 2]{[sgr 22][sgr 33]variant=value[sgr 0][sgr 2]}[sgr 22]  "
testouterr_cmd_re sh {list --color=always} OK $tserr
# valued variant value is default automatically set, module is loaded, key is reported
setenv_var __MODULES_LMVARIANT variant/1.0&foo|val1|0|2
testouterr_cmd_re sh {list --color=always} OK $tserr
# valued variant value is default, module is auto-loaded, key is reported
setenv_var __MODULES_LMVARIANT variant/1.0&foo|val1|0|1
setenv_var __MODULES_LMTAG variant/1.0&auto-loaded
set tserr "$cur_loaded
 1\\) [sgr 100]variant/1.0[sgr 0][sgr 2]{[sgr 22][sgr 33]foo=[sgr 0][sgr 33][sgr 4]val1[sgr 0][sgr 0][sgr 2]}[sgr 22]  

Key:
[sgr 4]default-version[sgr 0]  [sgr 100]auto-loaded[sgr 0]  [sgr 2]{[sgr 22][sgr 33]variant=value[sgr 0][sgr 2]}[sgr 22]  "
testouterr_cmd_re sh {list --color=always} OK $tserr
# valued variant value containing space is default, module is loaded, no key reported
setenv_var __MODULES_LMVARIANT {variant/1.0&foo|val1 |0|1}
unsetenv_var __MODULES_LMTAG
set tserr "$cur_loaded
 1\\) variant/1.0[sgr 2]{[sgr 22][sgr 33]foo=[sgr 0][sgr 33][sgr 4]val1 [sgr 0][sgr 0][sgr 2]}[sgr 22]  "
testouterr_cmd_re sh {list --color=always -o header:idx:variant:sym:tag} OK $tserr
# valued variant value is not default, module is loaded, no key reported
setenv_var __MODULES_LMVARIANT {variant/1.0&foo|val1|0|0}
set tserr "$cur_loaded
 1\\) variant/1.0[sgr 2]{[sgr 22][sgr 33]foo=[sgr 0][sgr 33]val1[sgr 0][sgr 2]}[sgr 22]  "
testouterr_cmd_re sh {list --color=always -o header:idx:variant:sym:tag} OK $tserr

# shortcut variant value is default, module is loaded, key is reported
# shortcut variant value is default, module is auto-loaded, key is reported
setenv_var __MODULES_LMTAG variant/1.0&auto-loaded
unsetenv_var __MODULES_LMTAG

# boolean variant value is default, module is loaded, key is reported
setenv_var __MODULES_LMVARIANT {variant/1.0&foo|1|1|1}
set tserr "$cur_loaded
 1\\) variant/1.0[sgr 2]{[sgr 22][sgr 33][sgr 4]\\+foo[sgr 0][sgr 0][sgr 2]}[sgr 22]  

Key:
[sgr 4]default-version[sgr 0]  [sgr 2]{[sgr 22][sgr 33]\\+variant[sgr 0][sgr 2]}[sgr 22]=[sgr 2]{[sgr 22][sgr 33]variant=on[sgr 0][sgr 2]}[sgr 22]  [sgr 2]{[sgr 22][sgr 33]variant=value[sgr 0][sgr 2]}[sgr 22]  "
testouterr_cmd_re sh {list --color=always} OK $tserr
# boolean variant value is default, module is auto-loaded, key is reported
setenv_var __MODULES_LMVARIANT {variant/1.0&foo|0|1|2}
setenv_var __MODULES_LMTAG variant/1.0&auto-loaded
set tserr "$cur_loaded
 1\\) [sgr 100]variant/1.0[sgr 0][sgr 2]{[sgr 22][sgr 33][sgr 4]-foo[sgr 0][sgr 0][sgr 2]}[sgr 22]  

Key:
[sgr 4]default-version[sgr 0]  [sgr 100]auto-loaded[sgr 0]  [sgr 2]{[sgr 22][sgr 33]-variant[sgr 0][sgr 2]}[sgr 22]=[sgr 2]{[sgr 22][sgr 33]variant=off[sgr 0][sgr 2]}[sgr 22]  [sgr 2]{[sgr 22][sgr 33]variant=value[sgr 0][sgr 2]}[sgr 22]  "
testouterr_cmd_re sh {list --color=always} OK $tserr
unsetenv_var __MODULES_LMTAG


# specification to select subset of loaded module with variant definition
setenv_var MODULES_ADVANCED_VERSION_SPEC 1
setenv_var MODULES_COLORS "hi=1:se=2:va=33:de=4:aL=100:L=90"
setenv_loaded_module [list variant/1.0 foo/1.0] [list $mp/variant/1.0 $mp/foo/1.0]

# regular variant
setenv_var TESTSUITE_VARIANT 13
setenv_var __MODULES_LMVARIANT variant/1.0&bar|val1|0|0&foo|val1|0|1

set tserr "$cur_matchingloaded
 1) variant/1.0{bar=val1:foo=val1}  

Key:
{variant=value}  "
testouterr_cmd sh {list variant foo=val1} OK $tserr
testouterr_cmd sh {list variant foo=val1 bar=val1} OK $tserr
testouterr_cmd sh {list variant foo=val2} OK $no_matchingloaded
testouterr_cmd sh {list variant foo=val2 bar=val1} OK $no_matchingloaded
testouterr_cmd sh {list variant baz=val1} OK $no_matchingloaded

set tserr "$cur_matchingloaded
 1\\) [sgr 1]variant[sgr 22]/1.0[sgr 2]{[sgr 22][sgr 33]bar=[sgr 0][sgr 33]val1[sgr 0][sgr 2]:[sgr 22][sgr 33][sgr 1]foo[sgr 22]=[sgr 0][sgr 33][sgr 4][sgr 1]val1[sgr 22][sgr 0][sgr 0][sgr 2]}[sgr 22]  

Key:
[sgr 4]default-version[sgr 0]  [sgr 2]{[sgr 22][sgr 33]variant=value[sgr 0][sgr 2]}[sgr 22]  "
testouterr_cmd_re sh {list --color=always variant foo=val1} OK $tserr
# no module name and version, only variant specified
set tserr "$cur_matchingloaded
 1\\) variant/1.0[sgr 2]{[sgr 22][sgr 33]bar=[sgr 0][sgr 33]val1[sgr 0][sgr 2]:[sgr 22][sgr 33][sgr 1]foo[sgr 22]=[sgr 0][sgr 33][sgr 4][sgr 1]val1[sgr 22][sgr 0][sgr 0][sgr 2]}[sgr 22]  

Key:
[sgr 4]default-version[sgr 0]  [sgr 2]{[sgr 22][sgr 33]variant=value[sgr 0][sgr 2]}[sgr 22]  "
testouterr_cmd_re sh {list --color=always foo=val1} OK $tserr

# shortcut variant
setenv_var MODULES_VARIANT_SHORTCUT foo=%

set tserr "$cur_matchingloaded
 1) variant/1.0{bar=val1:%val1}  

Key:
{%value}={foo=value}  {variant=value}  "
testouterr_cmd sh {list variant foo=val1} OK $tserr
testouterr_cmd sh {list variant %val1} OK $tserr
set tserr "$cur_matchingloaded
 1\\) [sgr 1]variant[sgr 22]/1.0[sgr 2]{[sgr 22][sgr 33]bar=[sgr 0][sgr 33]val1[sgr 0][sgr 2]:[sgr 22][sgr 33][sgr 1]%[sgr 22][sgr 0][sgr 33][sgr 4][sgr 1]val1[sgr 22][sgr 0][sgr 0][sgr 2]}[sgr 22]  

Key:
[sgr 4]default-version[sgr 0]  [sgr 2]{[sgr 22][sgr 33]%value[sgr 0][sgr 2]}[sgr 22]=[sgr 2]{[sgr 22][sgr 33]foo=value[sgr 0][sgr 2]}[sgr 22]  [sgr 2]{[sgr 22][sgr 33]variant=value[sgr 0][sgr 2]}[sgr 22]  "
testouterr_cmd_re sh {list --color=always variant %val1} OK $tserr
# no module name and version, only variant specified
set tserr "$cur_matchingloaded
 1\\) variant/1.0[sgr 2]{[sgr 22][sgr 33]bar=[sgr 0][sgr 33]val1[sgr 0][sgr 2]:[sgr 22][sgr 33][sgr 1]%[sgr 22][sgr 0][sgr 33][sgr 4][sgr 1]val1[sgr 22][sgr 0][sgr 0][sgr 2]}[sgr 22]  

Key:
[sgr 4]default-version[sgr 0]  [sgr 2]{[sgr 22][sgr 33]%value[sgr 0][sgr 2]}[sgr 22]=[sgr 2]{[sgr 22][sgr 33]foo=value[sgr 0][sgr 2]}[sgr 22]  [sgr 2]{[sgr 22][sgr 33]variant=value[sgr 0][sgr 2]}[sgr 22]  "
testouterr_cmd_re sh {list --color=always %val1} OK $tserr
unsetenv_var MODULES_VARIANT_SHORTCUT

# boolean variant
setenv_var TESTSUITE_VARIANT bool24
setenv_var __MODULES_LMVARIANT variant/1.0&bar|0|1|0&foo|1|1|1

set tserr "$cur_matchingloaded
 1) variant/1.0{-bar:+foo}  

Key:
{+variant}={variant=on}  {-variant}={variant=off}  {variant=value}  "
testouterr_cmd sh {list variant foo=on} OK $tserr
set tserr "$cur_matchingloaded
 1\\) [sgr 1]variant[sgr 22]/1.0[sgr 2]{[sgr 22][sgr 33][sgr 1]-bar[sgr 22][sgr 0][sgr 2]:[sgr 22][sgr 33][sgr 4][sgr 1]\\\+foo[sgr 22][sgr 0][sgr 0][sgr 2]}[sgr 22]  

Key:
[sgr 4]default-version[sgr 0]  [sgr 2]{[sgr 22][sgr 33]\\\+variant[sgr 0][sgr 2]}[sgr 22]=[sgr 2]{[sgr 22][sgr 33]variant=on[sgr 0][sgr 2]}[sgr 22]  [sgr 2]{[sgr 22][sgr 33]-variant[sgr 0][sgr 2]}[sgr 22]=[sgr 2]{[sgr 22][sgr 33]variant=off[sgr 0][sgr 2]}[sgr 22]  [sgr 2]{[sgr 22][sgr 33]variant=value[sgr 0][sgr 2]}[sgr 22]  "
testouterr_cmd_re sh {list -w 210 --color=always variant -bar +foo} OK $tserr
# no module name and version, only variant specified
set tserr "$cur_matchingloaded
 1\\) variant/1.0[sgr 2]{[sgr 22][sgr 33][sgr 1]-bar[sgr 22][sgr 0][sgr 2]:[sgr 22][sgr 33][sgr 4][sgr 1]\\\+foo[sgr 22][sgr 0][sgr 0][sgr 2]}[sgr 22]  

Key:
[sgr 4]default-version[sgr 0]  [sgr 2]{[sgr 22][sgr 33]\\\+variant[sgr 0][sgr 2]}[sgr 22]=[sgr 2]{[sgr 22][sgr 33]variant=on[sgr 0][sgr 2]}[sgr 22]  [sgr 2]{[sgr 22][sgr 33]-variant[sgr 0][sgr 2]}[sgr 22]=[sgr 2]{[sgr 22][sgr 33]variant=off[sgr 0][sgr 2]}[sgr 22]  [sgr 2]{[sgr 22][sgr 33]variant=value[sgr 0][sgr 2]}[sgr 22]  "
testouterr_cmd_re sh {list -w 210 --color=always -bar +foo} OK $tserr

# free value variant
setenv_var TESTSUITE_VARIANT free3
setenv_var __MODULES_LMVARIANT variant/1.0&foo|val1|0|0

set tserr "$cur_matchingloaded
 1) variant/1.0{foo=val1}  

Key:
{variant=value}  "
testouterr_cmd sh {list variant foo=val1} OK $tserr
testouterr_cmd sh {list variant foo=on} OK $no_matchingloaded
set tserr "$cur_matchingloaded
 1\\) [sgr 1]variant[sgr 22]/1.0[sgr 2]{[sgr 22][sgr 33][sgr 1]foo[sgr 22]=[sgr 0][sgr 33][sgr 1]val1[sgr 22][sgr 0][sgr 2]}[sgr 22]  

Key:
[sgr 2]{[sgr 22][sgr 33]variant=value[sgr 0][sgr 2]}[sgr 22]  "
testouterr_cmd_re sh {list --color=always variant foo=val1} OK $tserr
# no module name and version, only variant specified
set tserr "$cur_matchingloaded
 1\\) variant/1.0[sgr 2]{[sgr 22][sgr 33][sgr 1]foo[sgr 22]=[sgr 0][sgr 33][sgr 1]val1[sgr 22][sgr 0][sgr 2]}[sgr 22]  

Key:
[sgr 2]{[sgr 22][sgr 33]variant=value[sgr 0][sgr 2]}[sgr 22]  "
testouterr_cmd_re sh {list --color=always foo=val1} OK $tserr

unsetenv_var __MODULES_LMVARIANT
unsetenv_loaded_module
unsetenv_var MODULES_ADVANCED_VERSION_SPEC


#
# avail
#

setenv_var MODULES_AVAIL_OUTPUT {modulepath:alias:dirwsym:sym:tag:variantifspec}
setenv_var MODULES_AVAIL_TERSE_OUTPUT {modulepath:alias:dirwsym:sym:tag:variantifspec}

# variant not reported
testouterr_cmd_re sh {avail variant/1.0} OK "$modlin $mpre $modlin
variant/1.0  "

# specified variants taken into account (module returned if match)
setenv_var MODULES_ADVANCED_VERSION_SPEC 1
set tserr "$modlin $mpre $modlin\nvariant/1.0  "
testouterr_cmd_re sh {avail variant/1.0 foo=val1 baz=2} OK {}
setenv_var TESTSUITE_VARIANT 1
set tserr "$modlin $mpre $modlin\nvariant/6.0{bar=1,2,3:foo=val1,val2,val3}  "
testouterr_cmd_re sh {avail variant@6.0 foo=val1 baz=2} OK {}
testouterr_cmd_re sh {avail variant@6.0 foo=val4 bar=1} OK {}
testouterr_cmd_re sh {avail variant@6.0 foo=val4} OK {}
testouterr_cmd_re sh {avail variant@6.0 foo=val4 foo=val1} OK {}
testouterr_cmd_re sh {avail variant@6.0 baz=3} OK {}
testouterr_cmd_re sh {avail variant@6.0 foo=val1 foo=val2} OK $tserr
testouterr_cmd_re sh {avail variant@6.0 foo=val1 bar=2} OK $tserr
testouterr_cmd_re sh {avail variant@6.0 foo=val1 bar=2 bar=1} OK $tserr
testouterr_cmd_re sh {avail variant@6.0 foo=val1 bar=2 bar=4} OK {}
testouterr_cmd_re sh {avail variant@6.0 foo=val1 bar=4 bar=1} OK {}
testouterr_cmd_re sh {avail variant@6.0 foo=val1 bar=1} OK $tserr
testouterr_cmd_re sh {avail variant@6.0 foo=val1} OK $tserr
setenv_var MODULES_AVAIL_OUTPUT {modulepath:alias:dirwsym:sym:tag}
set tserr "$modlin $mpre $modlin\nvariant/6.0  "
testouterr_cmd_re sh {avail variant@6.0 bar=2} OK $tserr
setenv_var MODULES_AVAIL_OUTPUT {modulepath:alias:dirwsym:sym:tag:variantifspec}
# no module name/version, but variant specified
if {$install_availindepth eq {y}} {
    set tserr "$mp:\nvariant/4.0{bar=1,2,3:foo=val1,val2,val3}
variant/5.0{b?r =,v*l1,val2:bar=1,2,3:foo=val1,val2,val3,val 4}
variant/6.0{bar=1,2,3:foo=val1,val2,val3}"
} else {
    set tserr "$mp:\nvariant/"
}
testouterr_cmd sh {avail -t foo=val3 bar=3} OK $tserr

# shortcut variant specification
setenv_var MODULES_VARIANT_SHORTCUT foo=%
set tserr "$modlin $mpre $modlin\nvariant/6.0{bar=1,2,3:%val1,val2,val3}  "
testouterr_cmd_re sh {avail variant@6.0 %val4} OK {}
testouterr_cmd_re sh {avail variant@6.0 %val1 bar=2} OK $tserr
setenv_var MODULES_AVAIL_OUTPUT {modulepath:alias:dirwsym:sym:tag}
set tserr "$modlin $mpre $modlin\nvariant/6.0  "
testouterr_cmd_re sh {avail variant@6.0 %val2} OK $tserr
setenv_var MODULES_AVAIL_OUTPUT {modulepath:alias:dirwsym:sym:tag:variantifspec}
# no module name/version, but variant specified
if {$install_availindepth eq {y}} {
    set tserr "$mp:\nvariant/4.0{bar=1,2,3:%val1,val2,val3}
variant/5.0{b?r =,v*l1,val2:bar=1,2,3:%val1,val2,val3,val 4}
variant/6.0{bar=1,2,3:%val1,val2,val3}"
} else {
    set tserr "$mp:\nvariant/"
}
testouterr_cmd sh {avail -t %val3 bar=3} OK $tserr
unsetenv_var MODULES_VARIANT_SHORTCUT

# boolean variant specification
testouterr_cmd_re sh {avail variant@6.0 +foo -bar} OK {}
setenv_var TESTSUITE_VARIANT bool1
set tserr "$modlin $mpre $modlin\nvariant/6.0{bar=on,off:foo=on,off}  "
testouterr_cmd_re sh {avail variant@6.0 +foo -bar} OK $tserr
testouterr_cmd_re sh {avail variant@6.0 +foo} OK $tserr
setenv_var MODULES_AVAIL_OUTPUT {modulepath:alias:dirwsym:sym:tag}
set tserr "$modlin $mpre $modlin\nvariant/6.0  "
testouterr_cmd_re sh {avail variant@6.0 ~bar} OK $tserr
setenv_var MODULES_AVAIL_OUTPUT {modulepath:alias:dirwsym:sym:tag:variantifspec}
# no module name/version, but variant specified
if {$install_availindepth eq {n}} {
    set tserr "$modlin $mpre $modlin\nvariant/  "
} else {
    set tserr "$modlin $mpre $modlin\nvariant/6.0{bar=on,off:foo=on,off}  "
}
testouterr_cmd_re sh {avail ~bar} OK $tserr
unsetenv_var TESTSUITE_VARIANT

# free value variant
setenv_var TESTSUITE_VARIANT free3
set tserr "$modlin $mpre $modlin\nvariant/6.0{foo=\\*}  "
testouterr_cmd_re sh {avail variant/6.0 foo=val1} OK $tserr
setenv_var MODULES_AVAIL_OUTPUT {modulepath:alias:dirwsym:sym:tag}
set tserr "$modlin $mpre $modlin\nvariant/6.0  "
testouterr_cmd_re sh {avail variant/6.0 foo=no} OK $tserr
setenv_var MODULES_AVAIL_OUTPUT {modulepath:alias:dirwsym:sym:tag:variantifspec}
# no module name/version, but variant specified
if {$install_availindepth eq {y}} {
    set tserr "$mp:\nvariant/1.0{foo=*}\nvariant/6.0{foo=*}"
} else {
    set tserr "$mp:\nvariant/"
}
testouterr_cmd sh {avail -t foo=anything} OK $tserr
unsetenv_var TESTSUITE_VARIANT

# when advanced_version_spec is disabled, variant spec are considered as modulefile spec
setenv_var MODULES_ADVANCED_VERSION_SPEC 0
set tserr "$modlin $mpre $modlin\nvariant/6.0  \n\n$modlin $mpre $modlin\nvar=val  "
testouterr_cmd_re sh {avail variant/6.0 var=val} OK $tserr


# highlight color output
setenv_var MODULES_ADVANCED_VERSION_SPEC 1
setenv_var MODULES_COLORS "hi=1"
setenv_var TESTSUITE_VARIANT 1
set tserr "$mpre:\n[sgr 1]variant/6.0[sgr 22]{bar=1,2,3:[sgr 1]foo[sgr 22]=[sgr 1]val1[sgr 22],val2,val3}"
testouterr_cmd_re sh {avail --color=always -t variant@6.0,8.0 foo=val1 baz=2} OK {}
testouterr_cmd_re sh {avail --color=always -t variant@6.0,8.0 foo=val1} OK $tserr
set tserr "$mpre:\n[sgr 1]variant/6[sgr 22].0{bar=1,2,3:[sgr 1]foo[sgr 22]=[sgr 1]val1[sgr 22],val2,val3}
variant/7.0{[sgr 1]foo[sgr 22]=[sgr 1]val1[sgr 22],val2,val3}"
testouterr_cmd_re sh {avail --color=always -t variant@6:8 foo=val1 baz=2} OK {}
testouterr_cmd_re sh {avail --color=always -t variant@6:8 foo=val1} OK $tserr
set tserr "$mpre:\n[sgr 1]variant/6[sgr 22].0{[sgr 1]bar[sgr 22]=1,[sgr 1]2[sgr 22],3:[sgr 1]foo[sgr 22]=[sgr 1]val1[sgr 22],val2,[sgr 1]val3[sgr 22]}"
testouterr_cmd_re sh {avail --color=always -t variant@6:8 foo=val1 bar=2 foo=val3} OK $tserr
set tserr "$mpre:\n[sgr 1]variant/6[sgr 22].0{[sgr 1]bar[sgr 22]=[sgr 1]1[sgr 22],[sgr 1]2[sgr 22],3:[sgr 1]foo[sgr 22]=[sgr 1]val1[sgr 22],[sgr 1]val2[sgr 22],val3}"
testouterr_cmd_re sh {avail --color=always -t variant@6:8 foo=val1 bar=2 foo=val2 bar=1} OK $tserr
set tserr "$mpre:\n[sgr 1]variant/6[sgr 22].0{bar=1,2,3:[sgr 1]foo[sgr 22]=[sgr 1]val1[sgr 22],[sgr 1]val2[sgr 22],[sgr 1]val3[sgr 22]}
variant/7.0{[sgr 1]foo[sgr 22]=[sgr 1]val1[sgr 22],[sgr 1]val2[sgr 22],[sgr 1]val3[sgr 22]}"
testouterr_cmd_re sh {avail --color=always -t variant@6:8 foo=val3 foo=val1 foo=val2} OK $tserr
setenv_var TESTSUITE_VARIANT bool1
set tserr "$mpre:\n[sgr 1]variant/6[sgr 22].0{[sgr 1]bar[sgr 22]=on,[sgr 1]off[sgr 22]:[sgr 1]foo[sgr 22]=[sgr 1]on[sgr 22],[sgr 1]off[sgr 22]}"
testouterr_cmd_re sh {avail --color=always -t variant@6:8 +foo foo=off -bar} OK $tserr
set tserr "$mpre:\n[sgr 1]variant/6[sgr 22].0{bar=on,off:[sgr 1]foo[sgr 22]=[sgr 1]on[sgr 22],[sgr 1]off[sgr 22]}"
testouterr_cmd_re sh {avail --color=always -t variant@6:8 +foo foo=off foo=on} OK $tserr
testouterr_cmd_re sh {avail --color=always -t variant@6:8 -foo +foo} OK $tserr
testouterr_cmd_re sh {avail --color=always -t variant@6:8 foo=t foo=f} OK $tserr
testouterr_cmd_re sh {avail --color=always -t variant@6:8 foo=false foo=true} OK $tserr
unsetenv_var TESTSUITE_VARIANT

setenv_var MODULES_AVAIL_OUTPUT {modulepath:alias:dirwsym:sym:tag:variantifspec:key}
setenv_var MODULES_AVAIL_TERSE_OUTPUT {modulepath:alias:dirwsym:sym:tag:variantifspec}


#
# is-avail
#

# specified variants ignored whether they exist or not
setenv_var MODULES_ADVANCED_VERSION_SPEC 1
setenv_var TESTSUITE_VARIANT 1
testouterr_cmd_re sh {is-avail variant@6.0 foo=val1 baz=2} OK {}
testouterr_cmd_re sh {is-avail variant@6.0 foo=val1 bar=2} OK {}
# no module name/version, but variant specified
testouterr_cmd sh {is-avail foo=val1 bar=2} ERR "$err_specmodname'foo=val1 bar=2'"

# shortcut variant specification
setenv_var MODULES_VARIANT_SHORTCUT foo=%
testouterr_cmd_re sh {is-avail variant@6.0 %val1 baz=2} OK {}
testouterr_cmd_re sh {is-avail variant@6.0 %val1} OK {}
unsetenv_var MODULES_VARIANT_SHORTCUT

# boolean variant
testouterr_cmd_re sh {is-avail variant@6.0 -foo +bar} OK {}
setenv_var TESTSUITE_VARIANT bool1
testouterr_cmd_re sh {is-avail variant@6.0 -foo +bar} OK {}

# free value variant
setenv_var TESTSUITE_VARIANT free3
testouterr_cmd_re sh {is-avail variant/6.0 foo=val1} OK {}
testouterr_cmd_re sh {is-avail variant/6.0 foo=no} OK {}
unsetenv_var TESTSUITE_VARIANT

# when advanced_version_spec is disabled, variant spec are considered as modulefile spec
setenv_var MODULES_ADVANCED_VERSION_SPEC 0
setenv_var TESTSUITE_VARIANT 1
testouterr_cmd_re sh {is-avail variant/6.0 var=val} OK {}


#
# paths
#

# specified variants taken into account (module returned if match)
setenv_var MODULES_ADVANCED_VERSION_SPEC 1
setenv_var TESTSUITE_VARIANT 1
set ans [list [list text $mp/variant/6.0]]
testouterr_cmd sh {paths variant@6.0 foo=val1 baz=2} OK {}
testouterr_cmd sh {paths variant@6.0 foo=val4} OK {}
testouterr_cmd sh {paths variant@6.0 baz=4} OK {}
testouterr_cmd sh {paths variant@6.0 foo=val1 bar=2} $ans {}
testouterr_cmd sh {paths variant@6.0 foo=val1} $ans {}
testouterr_cmd sh {paths variant@6.0 bar=2} $ans {}
# no module name/version, but variant specified
set ans [list\
    [list text $mp/variant/4.0]\
    [list text $mp/variant/5.0]\
    [list text $mp/variant/6.0]]
testouterr_cmd sh {paths foo=val3 bar=3} $ans {}

# shortcut variant specification
setenv_var MODULES_VARIANT_SHORTCUT foo=%
set ans [list [list text $mp/variant/6.0]]
testouterr_cmd sh {paths variant@6.0 foo=val4} OK {}
testouterr_cmd sh {paths variant@6.0 %val1 bar=2} $ans {}
testouterr_cmd sh {paths variant@6.0 %val2} $ans {}
# no module name/version, but variant specified
set ans [list\
    [list text $mp/variant/4.0]\
    [list text $mp/variant/5.0]\
    [list text $mp/variant/6.0]]
testouterr_cmd sh {paths %val3 bar=3} $ans {}
unsetenv_var MODULES_VARIANT_SHORTCUT

# boolean variant
testouterr_cmd sh {paths variant@6.0 -foo +bar} OK {}
setenv_var TESTSUITE_VARIANT bool1
set ans [list [list text $mp/variant/6.0]]
testouterr_cmd sh {paths variant@6.0 ~foo +bar} $ans {}
testouterr_cmd sh {paths variant@6.0 -foo} $ans {}
testouterr_cmd sh {paths variant@6.0 +bar} $ans {}
# no module name/version, but variant specified
set ans [list [list text $mp/variant/6.0]]
testouterr_cmd sh {paths -bar +foo} $ans {}

# free value variant
setenv_var TESTSUITE_VARIANT free3
set ans [list [list text $mp/variant/6.0]]
testouterr_cmd sh {paths variant/6.0 foo=val1} $ans {}
testouterr_cmd sh {paths variant/6.0 foo=no} $ans {}
# no module name/version, but variant specified
set ans [list\
    [list text $mp/variant/1.0]\
    [list text $mp/variant/6.0]]
testouterr_cmd sh {paths foo=anything} $ans {}
unsetenv_var TESTSUITE_VARIANT

# when advanced_version_spec is disabled, variant spec are considered as modulefile spec
setenv_var MODULES_ADVANCED_VERSION_SPEC 0
setenv_var TESTSUITE_VARIANT 1
set tserr "$error_msgs: Unexpected number of args for 'paths' command\n$err_typehelp"
testouterr_cmd sh {paths variant/6.0 var=val} ERR $tserr


#
# path
#

# specified variants ignored whether they exist or not
setenv_var MODULES_ADVANCED_VERSION_SPEC 1
setenv_var TESTSUITE_VARIANT 1
set ans [list [list text $mp/variant/6.0]]
testouterr_cmd sh {path variant@6.0 foo=val1 baz=2} $ans {}
testouterr_cmd sh {path variant@6.0 foo=val1 bar=2} $ans {}
# no module name/version, but variant specified
testouterr_cmd sh {path foo=val1 bar=2} ERR "$err_specmodname'foo=val1 bar=2'"

# shortcut variant specification
setenv_var MODULES_VARIANT_SHORTCUT foo=%
testouterr_cmd sh {path variant@6.0 %val1 baz=2} $ans {}
testouterr_cmd sh {path variant@6.0 %val1} $ans {}
unsetenv_var MODULES_VARIANT_SHORTCUT

# boolean variant
testouterr_cmd sh {path variant@6.0 +foo -bar} $ans {}
setenv_var TESTSUITE_VARIANT bool1
testouterr_cmd sh {path variant@6.0 +foo ~bar} $ans {}

# free value variant
setenv_var TESTSUITE_VARIANT free3
testouterr_cmd sh {path variant/6.0 foo=val1} $ans {}
testouterr_cmd sh {path variant/6.0 foo=no} $ans {}
unsetenv_var TESTSUITE_VARIANT

# when advanced_version_spec is disabled, variant spec are considered as modulefile spec
setenv_var MODULES_ADVANCED_VERSION_SPEC 0
setenv_var TESTSUITE_VARIANT 1
set tserr "$error_msgs: Unexpected number of args for 'path' command\n$err_typehelp"
testouterr_cmd sh {path variant/6.0 var=val} ERR $tserr


#
#  Cleanup
#

reset_test_env
